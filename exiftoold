#!/usr/bin/env python

"""
Usage:
    exiftoold [-n num_workers]
    exiftoold query <filename>

Options:
    -n num_workers    Number of exiftool processes to spawn [default: 2]
"""


import collections
import shlex
import sys

import docopt
import cjson

import vanilla


EXIF_COMMAND = \
    '/usr/bin/env exiftool -stay_open True -@ - -common_args  -j -b -g'


def massage_exif(data):
    data = data[0]

    if 'File' in data:
        sub = data['File']
        for key, target in [
            ('ImageWidth', 'PixelWidth'),
            ('ImageHeight', 'PixelHeight'),
            ('FileType', 'FileType'),
            ('MIMEType', 'MIMEType'),
            ('BitsPerSample', 'Depth'),
            ('ColorComponents', 'ColorComponents'),
        ]:
            if key in sub:
                data[target] = sub[key]
        del data['File']

    data.pop('SourceFile')
    data.pop('ExifTool')

    if 'ICC_Profile' in data:
        sub = data['ICC_Profile']
        if 'ProfileDescription' in sub:
            data['ProfileName'] = sub['ProfileDescription']

    return data


class Exifd(object):
    def __init__(self, h):
        self.h = h

        self.child = self.h.process.execv(shlex.split(EXIF_COMMAND))

        # TODO: ganky
        sender, recver = self.h.router()
        self.child.stdout.pipe(sender)
        self.child.stderr.pipe(sender)
        import vanilla.message
        self.stream = vanilla.message.Stream(recver)

    def query(self, name):
        self.child.stdin.send('%s\n-execute\n' % name)
        response = self.stream.recv_partition('\n{ready}\n')
        try:
            response = cjson.decode(response)
            response = massage_exif(response)
            response = cjson.encode(response)
        except cjson.DecodeError:
            response = cjson.encode({'error': response.strip()})
        return response


def do_query(filename):
    h = vanilla.Hub()
    conn = h.tcp.connect(host='127.0.0.1', port=9000)
    conn.send(filename+'\n')
    print conn.recv_partition('\n')
    conn.close


def do_serve(num_workers):
    h = vanilla.Hub()

    print 'spawning %s workers...' % num_workers
    workers = h.channel(num_workers)
    for i in xrange(num_workers):
        workers.send(Exifd(h))
    print

    class Stats(object):
        def __init__(self):
            self.requests = 0

            @h.spawn
            def _():
                for _ in h.pulse(10*1000):
                    print 'stats: period=10s requests=%s' % self.requests
                    self.requests = 0

    stats = Stats()

    def serve(conn):
        try:
            while True:
                name = conn.recv_partition('\n')
                worker = workers.recv()
                response = worker.query(name)
                workers.send(worker)
                conn.send(response)
                conn.send('\n')
                stats.requests += 1
        except vanilla.Halt:
            conn.close()
            return

    server = h.tcp.listen(port=9000)
    print 'listening on 127.0.0.1:%s' % server.port

    @h.spawn
    def _():
        while True:
            conn = server.recv()
            h.spawn(serve, conn)

    h.stop_on_term()


def main(argv):
    if argv['query']:
        return do_query(argv['<filename>'])

    return do_serve(int(argv['-n']))


if __name__ == '__main__':
    import logging
    logging.basicConfig()
    argv = docopt.docopt(__doc__)
    sys.exit(main(argv))
