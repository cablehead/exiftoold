#!/usr/bin/env python

"""
Usage:
    exiftoold [-n num_workers]

Options:
    -n num_workers    Number of exiftool processes to spawn [default: 2]
"""


import collections
import shlex
import sys

import docopt
import cjson

import vanilla


EXIF_COMMAND = \
    '/usr/bin/env exiftool -stay_open True -@ - -common_args  -j -b -g'


class Exifd(object):
    def __init__(self, h):
        self.h = h

        self.child = self.h.process.execv(shlex.split(EXIF_COMMAND))

        # TODO: ganky
        sender, recver = self.h.router()
        self.child.stdout.pipe(sender)
        self.child.stderr.pipe(sender)
        import vanilla.message
        self.stream = vanilla.message.Stream(recver)

    def query(self, name):
        self.child.stdin.send('%s\n-execute\n' % name)
        response = self.stream.recv_partition('\n{ready}\n')
        try:
            response = cjson.decode(response)
            # strip wrapper
            response = response[0]
            response = cjson.encode(response)
        except cjson.DecodeError:
            response = cjson.encode({'error': response.strip()})
        return response


def main(argv):
    h = vanilla.Hub()

    NUM_WORKERS = int(argv['-n'])
    print 'Spawning %s workers...' % NUM_WORKERS
    workers = h.channel(NUM_WORKERS)
    for i in xrange(NUM_WORKERS):
        workers.send(Exifd(h))

    class Stats(object):
        def __init__(self):
            self.requests = 0

            @h.spawn
            def _():
                for _ in h.pulse(10*1000):
                    print 'stats: period=10s requests=%s' % self.requests
                    self.requests = 0

    stats = Stats()

    def serve(conn):
        try:
            while True:
                name = conn.recv_partition('\n')
                worker = workers.recv()
                response = worker.query(name)
                workers.send(worker)
                conn.send(response)
                conn.send('\n')
                stats.requests += 1
        except vanilla.Halt:
            conn.close()
            return

    server = h.tcp.listen(port=9000)
    print 'Listening on 127.0.0.1:%s' % server.port

    @h.spawn
    def _():
        while True:
            conn = server.recv()
            h.spawn(serve, conn)

    h.stop_on_term()


if __name__ == '__main__':
    import logging
    logging.basicConfig()
    argv = docopt.docopt(__doc__)
    sys.exit(main(argv))
