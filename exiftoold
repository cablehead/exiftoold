#!/usr/bin/env python

"""
Usage:
    exiftoold [-n num_workers]
    exiftoold query <source>
    exiftoold strip <source> <target>

Options:
    -n num_workers    Number of exiftool processes to spawn [default: 2]
"""


import collections
import shlex
import sys

import docopt
import cjson

import vanilla


EXIF_COMMAND = '/usr/bin/env exiftool -stay_open True -@ -'


def massage_exif(data):
    data = data[0]

    sub = data.pop('File', None)
    if sub:
        for key, target in [
            ('ImageWidth', 'PixelWidth'),
            ('ImageHeight', 'PixelHeight'),
            ('FileType', 'FileType'),
            ('MIMEType', 'MIMEType'),
            ('BitsPerSample', 'Depth'),
            ('ColorComponents', 'ColorComponents'),
        ]:
            if key in sub:
                data[target] = sub[key]

    data.pop('SourceFile', None)
    data.pop('ExifTool', None)

    sub = data.pop('ICC_Profile', None)
    if sub:
        if 'ProfileDescription' in sub:
            data['ProfileName'] = sub['ProfileDescription']

    data.get('Composite', {}).pop('ThumbnailImage', None)
    data.get('EXIF', {}).pop('ThumbnailLength', None)
    data.get('EXIF', {}).pop('ThumbnailOffset', None)

    return data


class Exifd(object):
    def __init__(self, h):
        self.h = h
        self.child = self.h.process.execv(
            shlex.split(EXIF_COMMAND), stderrtoout=True)

    def execute(self, *args):
        command = '\n'.join(list(args) + ['-execute']) + '\n'
        self.child.stdin.send(command)
        return self.child.stdout.recv_partition('\n{ready}\n')

    def strip(self, source, target):
        response = self.execute(
            '-all=',
            '-Adobe:all=',
            '--ICC_Profile:all',
            '--EXIF:all',
            source,
            '-out',
            target,
            )
        return cjson.encode({'status': response.strip()})

    def query(self, source):
        response = self.execute('-j', '-b', '-g', source)
        try:
            response = cjson.decode(response)
            response = massage_exif(response)
            response = cjson.encode(response)
        except cjson.DecodeError:
            response = cjson.encode({'error': response.strip()})
        return response


def do_query(source):
    h = vanilla.Hub()
    conn = h.tcp.connect(host='127.0.0.1', port=9000)
    conn.send('q\n'+source+'\n')
    print conn.recv_partition('\n')
    conn.close


def do_strip(source, target):
    h = vanilla.Hub()
    conn = h.tcp.connect(host='127.0.0.1', port=9000)
    conn.send('s\n'+source+'\n'+target+'\n')
    print conn.recv_partition('\n')
    conn.close


def do_serve(num_workers):
    h = vanilla.Hub()

    print 'spawning %s workers...' % num_workers
    # TODO: really want a resource pool primitive
    workers = h.channel(num_workers)
    for i in xrange(num_workers):
        workers.send(Exifd(h))
    print

    class Stats(object):
        def __init__(self):
            self.requests = 0

            @h.spawn
            def _():
                for _ in h.pulse(10*1000):
                    print 'stats: period=10s requests=%s' % self.requests
                    self.requests = 0

    stats = Stats()

    def serve(conn):
        try:
            while True:
                command = conn.recv_partition('\n')
                if command == 'q':
                    source = conn.recv_partition('\n')
                    worker = workers.recv()
                    response = worker.query(source)
                    workers.send(worker)

                elif command == 's':
                    source = conn.recv_partition('\n')
                    target = conn.recv_partition('\n')
                    worker = workers.recv()
                    response = worker.strip(source, target)
                    workers.send(worker)

                else:
                    response = cjson.encode(
                        {'error': 'unknown command: %s' % command})

                conn.send(response)
                conn.send('\n')
                stats.requests += 1

        except vanilla.Halt:
            conn.close()
            return

    server = h.tcp.listen(port=9000)
    print 'listening on 127.0.0.1:%s' % server.port

    @h.spawn
    def _():
        while True:
            conn = server.recv()
            h.spawn(serve, conn)

    h.stop_on_term()


def main(argv):
    if argv['query']:
        return do_query(argv['<source>'])

    if argv['strip']:
        return do_strip(argv['<source>'], argv['<target>'])

    return do_serve(int(argv['-n']))


if __name__ == '__main__':
    import logging
    logging.basicConfig()
    argv = docopt.docopt(__doc__)
    sys.exit(main(argv))
